<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>247.1</string>
	<key>AMApplicationVersion</key>
	<string>2.1.1</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.1</string>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Shell-Skript ausführen</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/usr/bin/env ruby -wKU

# Adapted from Brett Terpstra’s original “Markdown to Evernote” service (http://brettterpstra.com/a-better-os-x-system-service-for-evernote-notes-with-multimarkdown/)
# Martin Kopischke 2011 – License: Creative Commons Attribution Share-Alike (CC BY-SA) 3.0 Unported (http://creativecommons.org/licenses/by-sa/3.0/)
# Changes:	– create only one Evernote note per (Multi)Markdown input passed (instead of one per line)
#			– do not choke on shell escape characters (use Tempfile instead of shell pipe for osascript)
#			– default to MultiMarkdown 3 executable (instead of MMD 2 Perl script)
#			– make smart typography processing optional (set SMARTY to 'false' to bypass processing;
#			  note smart typography cannot be disabled in MMD 3.0 and 3.0.1
#			– handle both smart typography processing scripts (ie. SmartyPants.pl)
#			  and (Multi)Markdown processor extensions (i.e. '--smart' and MMD's upcoming '--nosmart')
#			– handle both command line switches to (Multi)Markdown processor and separate smart typography processors
#			– restrict parsing for metadata (note title, tags, target notebook) to the metadata block as per MMD spec
#			  note atx style 1st level headings will be parsed anywhere, as they terminate the metadata block anyway
#			– specify note title in metadata block MMD style, using 'Title: &lt;name&gt;' (not just as 1st level heading)
#			– specify target notebook in metadata block either with '= &lt;name&gt;' or MMD style, using 'Notebook: &lt;name&gt;'
#			– specify tags in metadata block either with '@ &lt;tag list&gt;' or MMD style, using 'Keywords: &lt;tag list&gt;'   
#			– correctly parse tag names with punctuation (no commas) and other “special” characters
#			– correctly assign multiple tags (instead of quietly failing)
#			– correctly parse all flavors of 1st level atx headings (not just those following the hash with a space)
#			– use localized date time stamp from AppleScript (instead of US formatted) as fallback note title
#			– use Evernote default notebook if none is indicated in input (instead of 'Unfiled')
#			– added minimal sanity checks (like make sure Markdown executable actually exists and is executable)
#			– runs on Ruby 1.8 and 1.9
# To do:	– process settext 1st level headings
#			– ignore Markdown 1st level headings when a 'Title:' metadata line is found?

# Markdown executable path
# – edit to match your install location if non-default
# – pre-version 3 MMD script usually is '~/Application Support/MultiMarkDown/bin/MultiMarkDown.pl'
MARKDOWN = '/usr/local/bin/multimarkdown'
Process.exit unless File.executable?(MARKDOWN) 

# Smart typography (aka SmartyPants) switch
SMARTY = true
# – Smart typography processing via MARKDOWN extension
#   enable with '--smart' for PEG Markdown, disable using '--nosmart' in upcoming MMD version 3
SMARTY_EXT_ON  = '--smart'
SMARTY_EXT_OFF = '--nosmart'
# – Separate smart typography processor (i.e. SmartyPants.pl)
#   set to path to SmartyPants.pl (for classic Markdown and MMD pre-version 3, usually same dir as (Multi)MarkDown.pl)
#   set to '' to use SMARTY_EXT instead
SMARTY_PATH = ''
if SMARTY &amp;&amp; !SMARTY_PATH.empty? then Process.exit unless File.executable?(SMARTY_PATH) end

# utility function: escape double quotes and backslashes (for AppleScript)
def escape(str)
	str.to_s.gsub(/(?=["\\])/, '\\')
end

# utility function: enclose string in double quotes
def quote(str)
	'"' &lt;&lt; str.to_s &lt;&lt; '"'
end

# buffer
input = ''
# processed data
contents = ''
title = ''
tags = ''
notebook = ''
# operation switches
metadata = true

# parse for metadata and pass all non-metadata to input
ARGF.each_line do |line|
	case line
	# note title (either MMD metadata 'Title' – must occur before the first blank line – or atx style 1st level heading)
	when /^Title:\s.*?/
 		if metadata then title = line[7..-1].strip else input &lt;&lt; line end
	# strip all 1st level headings as logically, note title is 1st level
	when /^#[^#]+?/
		if title.empty? then title = line[line.index(/[^#]/)..-1].strip end
	# note tags (either MMD metadata 'Keywords' or '@ &lt;tag list&gt;'; must occur before the first blank line)
	when /^(Keywords:|@)\s.*?/
		if metadata then tags = line[line.index(/\s/)+1..-1].split(',').map {|tag| tag = tag.strip} else input &lt;&lt; line end
	# notebook (either MMD metadata 'Notebook' or '= &lt;name&gt;'; must occur before the first blank line)
	when /^(Notebook:|=)\s.*?/
		if metadata then notebook = line[line.index(/\s/)+1..-1].strip else input &lt;&lt; line end
	# metadata block ends at first blank line
	when /^\s?$/
		if metadata then metadata = false end
		input &lt;&lt; line
	# anything else is appended to input
	else
		input &lt;&lt; line
	end
end

# Markdown processing
mmd_cmd =  "#{quote MARKDOWN}"
mmd_cmd &lt;&lt; if SMARTY_PATH.empty? then SMARTY ? " #{SMARTY_EXT_ON}" : " #{SMARTY_EXT_OFF}" else "|#{quote SMARTY_PATH}" end unless !SMARTY

IO.popen(mmd_cmd, 'r+') do |io|
	input.each_line {|line| io &lt;&lt; line}
	io.close_write
	io.each_line {|line| contents &lt;&lt; line}
end

# create note, using localized date and time stamp as fallback for title
if title.empty? then title = %x{osascript -e 'get (current date) as text'}.chomp end

osa_cmd =  "tell application #{quote 'Evernote'} to create note with html #{quote escape contents}"
osa_cmd &lt;&lt; "  title #{quote escape title}"
if tags.length  &gt; 1 then osa_cmd &lt;&lt; " tags #{'{' &lt;&lt; tags.map {|tag| tag = quote escape tag}.join(",") &lt;&lt; '}'}" end
if tags.length == 1 then osa_cmd &lt;&lt; " tags #{quote escape tags[0]}" end
osa_cmd &lt;&lt; " notebook #{quote escape notebook}" unless notebook.empty?

require 'tempfile'
Tempfile.open('md2evernote') do |file|
	file.puts osa_cmd
	file.rewind
	%x{osascript "#{file.path}"}
end</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/usr/bin/ruby</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>Application</key>
				<array>
					<string>Automator</string>
				</array>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.1</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>978E1583-CF10-48AA-81D7-30F0E626FBB0</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Skript</string>
					<string>Befehl</string>
					<string>Ausführen</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>888C6E32-0D99-4A72-B23C-CC3136014B3D</string>
				<key>UUID</key>
				<string>C1FC5C8D-ABBD-445B-98B5-C1F7D482C0A2</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>302.000000:493.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/German.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>state</key>
	<dict>
		<key>AMLogTabViewSelectedIndex</key>
		<integer>1</integer>
		<key>libraryState</key>
		<dict>
			<key>actionsMajorSplitViewState</key>
			<dict>
				<key>expandedPosition</key>
				<real>181</real>
				<key>subviewState</key>
				<array>
					<string>0.000000, 0.000000, 381.000000, 574.000000, NO</string>
					<string>0.000000, 575.000000, 381.000000, 77.000000, NO</string>
				</array>
			</dict>
			<key>actionsMinorSplitViewState</key>
			<dict>
				<key>expandedPosition</key>
				<real>0.0</real>
				<key>subviewState</key>
				<array>
					<string>0.000000, 0.000000, 163.000000, 574.000000, NO</string>
					<string>164.000000, 0.000000, 217.000000, 574.000000, NO</string>
				</array>
			</dict>
			<key>variablesMajorSplitViewState</key>
			<dict>
				<key>expandedPosition</key>
				<real>0.0</real>
				<key>subviewState</key>
				<array>
					<string>0.000000, 0.000000, 381.000000, 555.000000, NO</string>
					<string>0.000000, 556.000000, 381.000000, 199.000000, NO</string>
				</array>
			</dict>
			<key>variablesMinorSplitViewState</key>
			<dict>
				<key>expandedPosition</key>
				<real>0.0</real>
				<key>subviewState</key>
				<array>
					<string>0.000000, 0.000000, 163.000000, 555.000000, NO</string>
					<string>164.000000, 0.000000, 217.000000, 555.000000, NO</string>
				</array>
			</dict>
		</dict>
		<key>majorSplitViewState</key>
		<dict>
			<key>expandedPosition</key>
			<real>0.0</real>
			<key>subviewState</key>
			<array>
				<string>0.000000, 0.000000, 381.000000, 697.000000, NO</string>
				<string>382.000000, 0.000000, 619.000000, 697.000000, NO</string>
			</array>
		</dict>
		<key>minorSplitViewState</key>
		<dict>
			<key>expandedPosition</key>
			<real>0.0</real>
			<key>subviewState</key>
			<array>
				<string>0.000000, 0.000000, 619.000000, 506.000000, NO</string>
				<string>0.000000, 516.000000, 619.000000, 162.000000, NO</string>
			</array>
		</dict>
		<key>windowFrame</key>
		<string>{{353, 151}, {1000, 774}}</string>
		<key>workflowViewScrollPosition</key>
		<string>{{0, 0}, {604, 506}}</string>
	</dict>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
